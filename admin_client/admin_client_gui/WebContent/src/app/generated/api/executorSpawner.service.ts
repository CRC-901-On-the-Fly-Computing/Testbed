/**
 * Kubernetes Executor Spawner REST Interface
 * This service can spawn an executor with the specified services on the kubernetes cluster.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ExecutorDescription } from '../model/executorDescription';
import { ExecutorLog } from '../model/executorLog';
import { ListOfServices } from '../model/listOfServices';
import { SimpleJSONMessage } from '../model/simpleJSONMessage';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ExecutorSpawnerService {

    protected basePath = 'http://sfb-k8master-1.cs.upb.de:31527/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * deleteLogs
     * delete the logs of the given executor
     * @param executorId executorId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteLogs(executorId: string, observe?: 'body', reportProgress?: boolean): Observable<SimpleJSONMessage>;
    public deleteLogs(executorId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SimpleJSONMessage>>;
    public deleteLogs(executorId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SimpleJSONMessage>>;
    public deleteLogs(executorId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (executorId === null || executorId === undefined) {
            throw new Error('Required parameter executorId was null or undefined when calling deleteLogs.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<SimpleJSONMessage>(`${this.basePath}/executor_log/${encodeURIComponent(String(executorId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * destroyExecutor
     * destroy an Executor and delete it from Kubernetes
     * @param executorId executorId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public destroyExecutor(executorId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public destroyExecutor(executorId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public destroyExecutor(executorId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public destroyExecutor(executorId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (executorId === null || executorId === undefined) {
            throw new Error('Required parameter executorId was null or undefined when calling destroyExecutor.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/executor/${encodeURIComponent(String(executorId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getExecutor
     * returns the executor if available
     * @param executorId executorId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getExecutor(executorId: string, observe?: 'body', reportProgress?: boolean): Observable<ExecutorDescription>;
    public getExecutor(executorId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExecutorDescription>>;
    public getExecutor(executorId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExecutorDescription>>;
    public getExecutor(executorId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (executorId === null || executorId === undefined) {
            throw new Error('Required parameter executorId was null or undefined when calling getExecutor.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ExecutorDescription>(`${this.basePath}/executor/${encodeURIComponent(String(executorId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getExecutors
     * returns list of available executors
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getExecutors(observe?: 'body', reportProgress?: boolean): Observable<Array<ExecutorDescription>>;
    public getExecutors(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ExecutorDescription>>>;
    public getExecutors(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ExecutorDescription>>>;
    public getExecutors(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ExecutorDescription>>(`${this.basePath}/executor`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getLogs
     * returns the logs of the executor
     * @param executorId executorId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLogs(executorId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ExecutorLog>>;
    public getLogs(executorId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ExecutorLog>>>;
    public getLogs(executorId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ExecutorLog>>>;
    public getLogs(executorId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (executorId === null || executorId === undefined) {
            throw new Error('Required parameter executorId was null or undefined when calling getLogs.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ExecutorLog>>(`${this.basePath}/executor_log/${encodeURIComponent(String(executorId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * spawnExecutor
     * Spawns an executor at the kubernetes.
     * @param body body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public spawnExecutor(body: ListOfServices, observe?: 'body', reportProgress?: boolean): Observable<SimpleJSONMessage>;
    public spawnExecutor(body: ListOfServices, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SimpleJSONMessage>>;
    public spawnExecutor(body: ListOfServices, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SimpleJSONMessage>>;
    public spawnExecutor(body: ListOfServices, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling spawnExecutor.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SimpleJSONMessage>(`${this.basePath}/executor`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * update executor with executor-id
     * 
     * @param body body
     * @param executorId executorId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateExecutor(body: ExecutorDescription, executorId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateExecutor(body: ExecutorDescription, executorId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateExecutor(body: ExecutorDescription, executorId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateExecutor(body: ExecutorDescription, executorId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateExecutor.');
        }

        if (executorId === null || executorId === undefined) {
            throw new Error('Required parameter executorId was null or undefined when calling updateExecutor.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/executor/${encodeURIComponent(String(executorId))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
