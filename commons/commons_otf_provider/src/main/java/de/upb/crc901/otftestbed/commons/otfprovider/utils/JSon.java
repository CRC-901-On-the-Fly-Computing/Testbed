package de.upb.crc901.otftestbed.commons.otfprovider.utils;

import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.kjetland.jackson.jsonSchema.JsonSchemaGenerator;

import de.upb.crc901.basicconfigurator.core.phase.ExplorationStrategy;
import de.upb.crc901.otftestbed.commons.otfprovider.configurator.requests.specs.matching.OTFMatchingSpecification;
import de.upb.crc901.otftestbed.commons.otfprovider.configurator.requests.specs.matching.reputation.OTFContext;
import de.upb.crc901.otftestbed.commons.otfprovider.configurator.requests.specs.matching.reputation.OTFFuzzyMatchingResultRequirement;
import de.upb.crc901.otftestbed.commons.otfprovider.configurator.requests.specs.matching.reputation.OTFMatchingResultRequirement;
import de.upb.crc901.otftestbed.commons.otfprovider.configurator.requests.specs.matching.reputation.OTFReputationCondition;
import de.upb.crc901.otftestbed.commons.otfprovider.configurator.requests.specs.matching.reputation.OTFReputationRequest;
import de.upb.crc901.otftestbed.commons.otfprovider.configurator.requests.specs.matching.reputation.OTFSimpleMatchingResultRequirement;
import de.upb.crc901.otftestbed.commons.otfprovider.configurator.requests.specs.requirements.RequirementsSpec;
import de.upb.crc901.otftestbed.commons.otfprovider.configurator.requests.specs.requirements.RequirementsSpecLiteral;
import de.upb.crc901.otftestbed.commons.otfprovider.configurator.requests.specs.requirements.RequirementsSpecParameter;
import de.upb.crc901.otftestbed.commons.otfprovider.matcher.result.OTFFuzzyMatchingResult;
import de.upb.crc901.otftestbed.commons.otfprovider.matcher.result.OTFMatchingResult;
import de.upb.crc901.otftestbed.commons.otfprovider.matcher.result.OTFSimpleMatchingResult;
import de.upb.crc901.otftestbed.commons.reputation.ServiceReputation;
import de.upb.crc901.otftestbed.commons.reputation.ServiceReputationList;
import de.upb.crc901.sse.reputation_request.FiveStarRange;
import de.upb.crc901.sse.reputation_request.Operators;


public class JSon {

  /**
   * Logger for this class.
   */
  private static final Logger log = LoggerFactory.getLogger(JSon.class);

  /**
   * List of classes a json schema will be generated by the generateAllSchemas method.
   */
  private static Class[] classes = {OTFContext.class, OTFFuzzyMatchingResultRequirement.class,
      OTFMatchingResultRequirement.class, OTFReputationCondition.class, OTFReputationRequest.class,
      OTFSimpleMatchingResultRequirement.class, OTFMatchingSpecification.class,
      RequirementsSpec.class, RequirementsSpecLiteral.class, RequirementsSpecParameter.class,
      OTFFuzzyMatchingResult.class, OTFMatchingResult.class, OTFSimpleMatchingResult.class,
      ServiceReputation.class, ServiceReputationList.class};

  /**
   * Empty private constructor to hide implicit public constructor.
   */
  private JSon() {}

  @SuppressWarnings({"rawtypes", "unchecked"})
  public static String generateJsonSchema(Class clazz) {
    String jsonSchemaAsString = "";
    try {
      ObjectMapper objectMapper = new ObjectMapper();
      JsonSchemaGenerator jsonSchemaGenerator = new JsonSchemaGenerator(objectMapper);

      JsonNode jsonSchema = jsonSchemaGenerator.generateJsonSchema(clazz);

      jsonSchemaAsString =
          objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonSchema);
    } catch (IOException e) {
      log.error("Error while generating Json Schema from class.", e);
      return "";
    }
    return jsonSchemaAsString;

  }

  public static void main(String[] args) {
    if ((args.length >= 1) && "generateschema".equalsIgnoreCase(args[0])) {
      try {
        generateSchemas();
      } catch (IOException e) {
        log.error("Couldn't generate schemas.", e);
      }
      generateSerializedJson();
    }
  }

  private static void generateSerializedJson() {
    Path tempPath = Paths.get("bin/json_serialized/");
    try {
      Files.createDirectories(tempPath);
    } catch (IOException e) {
      log.error("Couldn't create directories - " + e);
      return;
    }

    OTFFuzzyMatchingResultRequirement fuzzyMatchingResultReq =
        new OTFFuzzyMatchingResultRequirement();
    fuzzyMatchingResultReq.setMinLowerBound(.1);
    fuzzyMatchingResultReq.setMinLowerBound(.2);

    OTFSimpleMatchingResultRequirement simpleMatchingResultReq =
        new OTFSimpleMatchingResultRequirement();
    simpleMatchingResultReq.setMinValue(.5);

    OTFFuzzyMatchingResult fuzzyMatchingResult = new OTFFuzzyMatchingResult();
    fuzzyMatchingResult.setLowerThreshold(.4);
    fuzzyMatchingResult.setUpperThreshold(.5);

    OTFSimpleMatchingResult simpleMatchingResult = new OTFSimpleMatchingResult();
    simpleMatchingResult.setValue(.5);

    OTFContext context = OTFContext.OTHER;

    FiveStarRange range = FiveStarRange.FOUR;

    Operators operator = Operators.GREATER_OR_EQUAL;

    OTFReputationCondition repCondition = new OTFReputationCondition();
    repCondition.setContext(context);
    repCondition.setOperator(operator);
    repCondition.setRequestedFiveStarRange(range);

    OTFReputationRequest repRequest = new OTFReputationRequest();
    repRequest.setMatchingResultReq(fuzzyMatchingResultReq);
    repRequest.getReputationConditions().add(repCondition);
    repRequest.getReputationConditions().add(repCondition);

    OTFMatchingSpecification matchingSpecification = new OTFMatchingSpecification();
    matchingSpecification.setQualityEffects(.1);
    matchingSpecification.setQualityInputParams(.2);
    matchingSpecification.setQualityOutputParams(.3);
    matchingSpecification.setQualityPreconditions(.4);

    RequirementsSpecParameter reqSpecParam = new RequirementsSpecParameter();
    reqSpecParam.setDatatype("Datatype");
    reqSpecParam.setName("Requirements Spec Param Name");

    RequirementsSpecLiteral reqSpecLiteral = new RequirementsSpecLiteral();
    reqSpecLiteral.setName("Requirements Spec Literal Name");
    reqSpecLiteral.getParams().add(reqSpecParam.getName());

    Number[] numbers = {5, 10, 30};

    RequirementsSpec reqSpec = new RequirementsSpec();
    reqSpec.getEffect().add(reqSpecLiteral);
    reqSpec.getInputParams().add(reqSpecParam);
    reqSpec.setMatchingSpecification(matchingSpecification);
    reqSpec.setNonFunctionalRequirements(numbers);
    reqSpec.getReputationRequest().add(repRequest);
    reqSpec.setRequester("Requester");
    reqSpec.setStrategy(ExplorationStrategy.E_BFS);
    reqSpec.setTimeout(100);

    reqSpec.setCallbackURL("callbackURL");

    ServiceReputation serviceRep = new ServiceReputation();
    serviceRep.setOther(.1);
    serviceRep.setOverall(.2);
    serviceRep.setPerformance(.3);
    serviceRep.setSecurity(.4);
    serviceRep.setUsability(.5);

    ServiceReputationList serviceRepList = new ServiceReputationList();
    serviceRepList.getServiceReputation().add(serviceRep);
    serviceRepList.getServiceReputation().add(serviceRep);

    writeJson(fuzzyMatchingResultReq);
    writeJson(simpleMatchingResultReq);
    writeJson(fuzzyMatchingResult);
    writeJson(simpleMatchingResult);
    writeJson(context);
    writeJson(range);
    writeJson(operator);
    writeJson(repCondition);
    writeJson(repRequest);
    writeJson(matchingSpecification);
    writeJson(reqSpecParam);
    writeJson(reqSpecLiteral);
    writeJson(numbers);
    writeJson(reqSpec);
    writeJson(serviceRep);
    writeJson(serviceRepList);
  }

  private static void writeJson(Object obj) {
    String json = getJson(obj);
    Path file = Paths.get("bin/json_serialized/" + obj.getClass().getSimpleName() + ".txt");
    ArrayList<String> list = new ArrayList<>();
    list.add(json);
    try {
      Files.write(file, list, Charset.forName("UTF-8"));
    } catch (IOException e) {
      log.error("Couldn't write file.", e);
    }
  }

  private static String getJson(Object obj) {
    ObjectMapper mapper = new ObjectMapper();
    String json = "";
    try {
      json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(obj);
    } catch (JsonProcessingException e) {
      log.error("Couldn't convert to Json.", e);
      return "";
    }
    return json;
  }

  private static void generateSchemas() throws IOException {
    Path tempPath = Paths.get("bin/json_schemas/");
    try {
      Files.createDirectories(tempPath);
    } catch (IOException e) {
      log.error("Couldn't create directories - " + e);
      return;
    }

    for (Class clazz : classes) {
      String schema = generateJsonSchema(clazz);
      ArrayList<String> lines = new ArrayList<>();
      lines.add(schema);
      Path file = Paths.get("bin/json_schemas/" + clazz.getSimpleName() + ".txt");
      Files.write(file, lines, Charset.forName("UTF-8"));
    }
  }
}
