/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package de.upb.crc901.otftestbed.uploader.api;

import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import de.upb.crc901.otftestbed.commons.service_specification.schema.ServiceSpecification;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@Api(value = "service_uploader", description = "the service_uploader API")
public interface ServiceUploaderApi {

	@ApiOperation(value = "Deletes a Service-Specification by it's service name.", notes = "", response = Void.class, tags = {
			"service_uploader", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The Service-Specification successfully deleted.", response = String.class),
			@ApiResponse(code = 404, message = "The Service-Specification for this service_name was not found in the database.", response = Void.class) })

	@RequestMapping(value = "/service_uploader/{serviceName}", method = RequestMethod.DELETE)
	default ResponseEntity<String> deleteServiceSpec(
			@ApiParam(value = "The identifier (serviceName) of the Service-Specification that should be deleted.", required = true) @PathVariable("serviceName") String serviceName) {
		// do some magic!
		return new ResponseEntity<String>(HttpStatus.OK);
	}

	@ApiOperation(value = "Gets a Service-Specification by it's service name.", notes = "", response = ServiceSpecification.class, tags = {
			"service_uploader", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Returns the requested Service-Specification", response = ServiceSpecification.class),
			@ApiResponse(code = 404, message = "The Service-Specification for this service_name was not found in the database.", response = Void.class) })

	@RequestMapping(value = "/service_uploader/{serviceName}", method = RequestMethod.GET)
	default ResponseEntity<ServiceSpecification> getServiceSpec(
			@ApiParam(value = "The identifier (ServiceName) of the Service-Specifation that is requested.", required = true) @PathVariable("serviceName") String serviceName) {
		// do some magic!
		return new ResponseEntity<ServiceSpecification>(HttpStatus.OK);
	}

	@ApiOperation(value = "Updates a Service-Specification in the database. The operations from both, the existing and the updated, Service-Specifications will be merged such that the resulting Service-Specification contains the operations from both Service-Specifications.", notes = "", response = ServiceSpecification.class, tags = {
			"service_uploader", })
	@ApiResponses(value = {
			@ApiResponse(code = 201, message = "The Service-Specification was sucessfully updated.", response = ServiceSpecification.class),
			@ApiResponse(code = 404, message = "The Service-Specification for this service_name was not found in the database.", response = Void.class) })

	@RequestMapping(value = "/service_uploader", consumes = { "application/json" }, method = RequestMethod.POST)
	default ResponseEntity<ServiceSpecification> updateServiceSpec(
			@ApiParam(value = "The Service-Specification that should be updated to the database, identified by it's serviceName.", required = true) @Valid @RequestBody ServiceSpecification body) {
		// do some magic!
		return new ResponseEntity<ServiceSpecification>(HttpStatus.OK);
	}

	@ApiOperation(value = "Adds a Service-Specification to the database", notes = "", response = Void.class, tags = {
			"service_uploader", })
	@ApiResponses(value = {
			@ApiResponse(code = 201, message = "The Service-Specification was sucessfully saved in the database.", response = Void.class),
			@ApiResponse(code = 409, message = "The Service-Specification already exists in the database.", response = Void.class) })

	@RequestMapping(value = "/service_uploader", consumes = { "application/json" }, method = RequestMethod.PUT)
	default ResponseEntity<String> uploadServiceSpec(
			@ApiParam(value = "The Service-Specification that should be added to the database.", required = true) @Valid @RequestBody ServiceSpecification body) {
		// do some magic!
		return new ResponseEntity<String>(HttpStatus.OK);
	}

}
