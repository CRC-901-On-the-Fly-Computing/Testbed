def projectName = "{{projectName}}"
def fullProjectName = "sfb901-testbed/${projectName}"
def nexus = "nexus.cs.upb.de"
def deploymentName = projectName.replace("_","-")
//With / at the end but not the beginning
def projectPath = "{{projectPath}}"
{{^projectDomain}}
def projectDomain = projectPath[0..-2].replace("_","-")
{{/projectDomain}}
{{#projectDomain}}
def projectDomain = "{{projectDomain}}"
{{/projectDomain}}
def newTag = "nexus.cs.upb.de/sfb901-testbed/${projectName}:v${env.BUILD_ID}";

/*
{{#triggerOtherProjects}}
def triggerList = [{{#triggerList}}"{{project}}",{{/triggerList}}""]
triggerList = triggerList.dropRight(1)
{{/triggerOtherProjects}}

{{#forceTriggerProjects}}
def forceList = [{{#forceList}}"{{project}}",{{/forceList}}""]
forceList = forceList.dropRight(1)
{{/forceTriggerProjects}}
*/

{{#triggerOtherProjects}}
def buildProjects = true

{{/triggerOtherProjects}}


podTemplate(inheritFrom: 'default') {
    node(POD_LABEL) {
		stage('Preparation') {
			checkout([
				$class: 'GitSCM',
				branches: scm.branches,
				doGenerateSubmoduleConfigurations: scm.doGenerateSubmoduleConfigurations,
				extensions: scm.extensions,
				userRemoteConfigs: scm.userRemoteConfigs
			])
		}
		stage("Cleanup"){
			withEnv(['GRADLE_OPTS="-Dorg.gradle.daemon=true"']) {
				sh """
				chmod +x ./gradlew
				./gradlew :${projectName}:clean :${projectName}:cleanBuild :${projectName}:cleanAssemble :${projectName}:cleanCheck
				"""
			}
		}
		stage("Assemble"){
			withEnv(['GRADLE_OPTS="-Dorg.gradle.daemon=true"']) {
				sh """
				chmod +x ./gradlew
				./gradlew :${projectName}:assemble
				"""
			}
		}
		stage("Check"){
			withEnv(['GRADLE_OPTS="-Dorg.gradle.daemon=true"']) {
				sh """
				chmod +x ./gradlew
				./gradlew :${projectName}:check
				"""
			}
		}
		{{#useSonarqube_off}}
		stage('SonarQube analysis') {
			withSonarQubeEnv('Testbed Sonarqube') {
				// requires SonarQube Scanner for Gradle 2.1+
				// It's important to add --info because of SONARJNKNS-281
				retry(2) {
					sh """
					chmod +x ./gradlew
					./gradlew --info :${projectName}:sonarqube
					"""
				}
			}
		}
		stage("Quality Gate"){
			timeout(time: 2, unit: 'MINUTES') {
				// Just in case something goes wrong, pipeline will be killed after a timeout
				def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
				if (qg.status != 'OK') {
					error "Pipeline aborted due to quality gate failure: ${qg.status}"
				}
			}
		}
		{{/useSonarqube_off}}
		{{#uploadArtifacts}}
		stage('Build and upload artifacts') {
			withCredentials([
				[$class: 'UsernamePasswordMultiBinding', credentialsId: 'sfb901b1',
				usernameVariable: 'GRGIT_USER', passwordVariable: 'GRGIT_PASS']
			]){
				//available as an env variable, but will be masked if you try to print it out any which way
				retry(2) {
					sh """
					chmod +x ./gradlew
					./gradlew :${projectName}:build
					./gradlew snapshot :${projectName}:publish -Dorg.ajoberstar.grgit.auth.username="${env.GRGIT_USER}" \
					-Dorg.ajoberstar.grgit.auth.password="${env.GRGIT_PASS}"
					"""
				}
			}
			junit allowEmptyResults: true, testResults:"${projectPath}${projectName}/build/test-results/test/*.xml"
		}
		{{/uploadArtifacts}}
		{{#uploadDocker}}
		stage('Build docker image'){
			sh """chmod +x ./gradlew
				./gradlew :${projectName}:build  :${projectName}:docker
		 		./gradlew :${projectName}:dockerLogin
		 		./gradlew :${projectName}:dockerTag "-PdockerVersion=v${env.BUILD_ID}"
				./gradlew :${projectName}:dockerTagsPush "-PdockerVersion=v${env.BUILD_ID}"
		   """
		}
		stage('Update Kubernetes image tags'){
			sh """
				kubectl -n ${projectDomain} set image deployments/${deploymentName} ${deploymentName}=${newTag}
			"""
		}
		{{/uploadDocker}}
	}
}

