/**
 * Review-Board
 * A simple REST interface to communicate with the reputation-system.
 *
 * OpenAPI spec version: 2.1
 * Contact: mirkoj@mail.upb.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ExtendedServiceReputation } from '../model/extendedServiceReputation';
import { ReactRepresentableReview } from '../model/reactRepresentableReview';
import { ServiceReputationAndSignature } from '../model/serviceReputationAndSignature';
import { SimpleJSONMessage } from '../model/simpleJSONMessage';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ServiceRatingsService {

    protected basePath = 'https://sfb-k8node-1.cs.uni-paderborn.de:32413/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Counts all reviews of the specified service
     * 
     * @param serviceID serviceID
     * @param maxOther maxOther
     * @param maxOverall maxOverall
     * @param maxPerformance maxPerformance
     * @param maxSecurity maxSecurity
     * @param maxUsability maxUsability
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public countServiceReviewsUsingGET(serviceID: string, maxOther?: number, maxOverall?: number, maxPerformance?: number, maxSecurity?: number, maxUsability?: number, observe?: 'body', reportProgress?: boolean): Observable<SimpleJSONMessage>;
    public countServiceReviewsUsingGET(serviceID: string, maxOther?: number, maxOverall?: number, maxPerformance?: number, maxSecurity?: number, maxUsability?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SimpleJSONMessage>>;
    public countServiceReviewsUsingGET(serviceID: string, maxOther?: number, maxOverall?: number, maxPerformance?: number, maxSecurity?: number, maxUsability?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SimpleJSONMessage>>;
    public countServiceReviewsUsingGET(serviceID: string, maxOther?: number, maxOverall?: number, maxPerformance?: number, maxSecurity?: number, maxUsability?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (serviceID === null || serviceID === undefined) {
            throw new Error('Required parameter serviceID was null or undefined when calling countServiceReviewsUsingGET.');
        }






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (maxOther !== undefined && maxOther !== null) {
            queryParameters = queryParameters.set('maxOther', <any>maxOther);
        }
        if (maxOverall !== undefined && maxOverall !== null) {
            queryParameters = queryParameters.set('maxOverall', <any>maxOverall);
        }
        if (maxPerformance !== undefined && maxPerformance !== null) {
            queryParameters = queryParameters.set('maxPerformance', <any>maxPerformance);
        }
        if (maxSecurity !== undefined && maxSecurity !== null) {
            queryParameters = queryParameters.set('maxSecurity', <any>maxSecurity);
        }
        if (maxUsability !== undefined && maxUsability !== null) {
            queryParameters = queryParameters.set('maxUsability', <any>maxUsability);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<SimpleJSONMessage>(`${this.basePath}/service_ratings/${encodeURIComponent(String(serviceID))}/count`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets an aggregated rating for the specified service
     * Collects all review where this service was part of and aggregates the rating
     * @param serviceID serviceID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAggregatedServiceReputationUsingGET(serviceID: string, observe?: 'body', reportProgress?: boolean): Observable<ExtendedServiceReputation>;
    public getAggregatedServiceReputationUsingGET(serviceID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExtendedServiceReputation>>;
    public getAggregatedServiceReputationUsingGET(serviceID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExtendedServiceReputation>>;
    public getAggregatedServiceReputationUsingGET(serviceID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (serviceID === null || serviceID === undefined) {
            throw new Error('Required parameter serviceID was null or undefined when calling getAggregatedServiceReputationUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ExtendedServiceReputation>(`${this.basePath}/service_ratings/${encodeURIComponent(String(serviceID))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of ratings where the specified service is part of.
     * 
     * @param serviceID serviceID
     * @param maxOther maxOther
     * @param maxOverall maxOverall
     * @param maxPerformance maxPerformance
     * @param maxSecurity maxSecurity
     * @param maxUsability maxUsability
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getServiceReputationListUsingGET(serviceID: string, maxOther?: number, maxOverall?: number, maxPerformance?: number, maxSecurity?: number, maxUsability?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ServiceReputationAndSignature>>;
    public getServiceReputationListUsingGET(serviceID: string, maxOther?: number, maxOverall?: number, maxPerformance?: number, maxSecurity?: number, maxUsability?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ServiceReputationAndSignature>>>;
    public getServiceReputationListUsingGET(serviceID: string, maxOther?: number, maxOverall?: number, maxPerformance?: number, maxSecurity?: number, maxUsability?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ServiceReputationAndSignature>>>;
    public getServiceReputationListUsingGET(serviceID: string, maxOther?: number, maxOverall?: number, maxPerformance?: number, maxSecurity?: number, maxUsability?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (serviceID === null || serviceID === undefined) {
            throw new Error('Required parameter serviceID was null or undefined when calling getServiceReputationListUsingGET.');
        }






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (maxOther !== undefined && maxOther !== null) {
            queryParameters = queryParameters.set('maxOther', <any>maxOther);
        }
        if (maxOverall !== undefined && maxOverall !== null) {
            queryParameters = queryParameters.set('maxOverall', <any>maxOverall);
        }
        if (maxPerformance !== undefined && maxPerformance !== null) {
            queryParameters = queryParameters.set('maxPerformance', <any>maxPerformance);
        }
        if (maxSecurity !== undefined && maxSecurity !== null) {
            queryParameters = queryParameters.set('maxSecurity', <any>maxSecurity);
        }
        if (maxUsability !== undefined && maxUsability !== null) {
            queryParameters = queryParameters.set('maxUsability', <any>maxUsability);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ServiceReputationAndSignature>>(`${this.basePath}/service_ratings/${encodeURIComponent(String(serviceID))}/list`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a raw list of ratings where the specified service is part of.
     * 
     * @param serviceID serviceID
     * @param maxOther maxOther
     * @param maxOverall maxOverall
     * @param maxPerformance maxPerformance
     * @param maxSecurity maxSecurity
     * @param maxUsability maxUsability
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getServiceReviewListUsingGET(serviceID: string, maxOther?: number, maxOverall?: number, maxPerformance?: number, maxSecurity?: number, maxUsability?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ReactRepresentableReview>>;
    public getServiceReviewListUsingGET(serviceID: string, maxOther?: number, maxOverall?: number, maxPerformance?: number, maxSecurity?: number, maxUsability?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ReactRepresentableReview>>>;
    public getServiceReviewListUsingGET(serviceID: string, maxOther?: number, maxOverall?: number, maxPerformance?: number, maxSecurity?: number, maxUsability?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ReactRepresentableReview>>>;
    public getServiceReviewListUsingGET(serviceID: string, maxOther?: number, maxOverall?: number, maxPerformance?: number, maxSecurity?: number, maxUsability?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (serviceID === null || serviceID === undefined) {
            throw new Error('Required parameter serviceID was null or undefined when calling getServiceReviewListUsingGET.');
        }






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (maxOther !== undefined && maxOther !== null) {
            queryParameters = queryParameters.set('maxOther', <any>maxOther);
        }
        if (maxOverall !== undefined && maxOverall !== null) {
            queryParameters = queryParameters.set('maxOverall', <any>maxOverall);
        }
        if (maxPerformance !== undefined && maxPerformance !== null) {
            queryParameters = queryParameters.set('maxPerformance', <any>maxPerformance);
        }
        if (maxSecurity !== undefined && maxSecurity !== null) {
            queryParameters = queryParameters.set('maxSecurity', <any>maxSecurity);
        }
        if (maxUsability !== undefined && maxUsability !== null) {
            queryParameters = queryParameters.set('maxUsability', <any>maxUsability);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ReactRepresentableReview>>(`${this.basePath}/service_ratings/${encodeURIComponent(String(serviceID))}/rawlist`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
