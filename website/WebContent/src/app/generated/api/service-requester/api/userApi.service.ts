/**
 * Service Requester REST Interface
 * Rest interface to communicate with the service requester.
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ConfigurationMarketMonitorSources } from '../model/configurationMarketMonitorSources';
import { InterviewResponse } from '../model/interviewResponse';
import { ItemAndRequest } from '../model/itemAndRequest';
import { JobstateAndRequest } from '../model/jobstateAndRequest';
import { OTFProviderConfidence } from '../model/oTFProviderConfidence';
import { Offer } from '../model/offer';
import { OfferAndRequest } from '../model/offerAndRequest';
import { ServiceReputation } from '../model/serviceReputation';
import { SimpleJSONMessage } from '../model/simpleJSONMessage';
import { SimpleJSONUuid } from '../model/simpleJSONUuid';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class UserApiService {

    protected basePath = 'https://sfb-k8master-1.cs.uni-paderborn.de:31052/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * acceptOTFProvider
     * Accepts an otf-provider for this request.
     * @param otfpUUID otfpUUID
     * @param requestUUID requestUUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public acceptOTFProvider(otfpUUID: string, requestUUID: string, observe?: 'body', reportProgress?: boolean): Observable<InterviewResponse>;
    public acceptOTFProvider(otfpUUID: string, requestUUID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InterviewResponse>>;
    public acceptOTFProvider(otfpUUID: string, requestUUID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InterviewResponse>>;
    public acceptOTFProvider(otfpUUID: string, requestUUID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (otfpUUID === null || otfpUUID === undefined) {
            throw new Error('Required parameter otfpUUID was null or undefined when calling acceptOTFProvider.');
        }

        if (requestUUID === null || requestUUID === undefined) {
            throw new Error('Required parameter requestUUID was null or undefined when calling acceptOTFProvider.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<InterviewResponse>(`${this.basePath}/requests/${encodeURIComponent(String(requestUUID))}/providers/${encodeURIComponent(String(otfpUUID))}/accept`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * answerProsecoInterview
     * Answers a proseco interview question.
     * @param requestUUID requestUUID
     * @param body body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public answerProsecoInterview(requestUUID: string, body?: any, observe?: 'body', reportProgress?: boolean): Observable<InterviewResponse>;
    public answerProsecoInterview(requestUUID: string, body?: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InterviewResponse>>;
    public answerProsecoInterview(requestUUID: string, body?: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InterviewResponse>>;
    public answerProsecoInterview(requestUUID: string, body?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (requestUUID === null || requestUUID === undefined) {
            throw new Error('Required parameter requestUUID was null or undefined when calling answerProsecoInterview.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<InterviewResponse>(`${this.basePath}/requests/${encodeURIComponent(String(requestUUID))}/proseco_interview`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * buyOffer
     * Accepts the offer specified by the composition identifier. If the user is authorized to buy this composition, he will get a service-link and a rating token, which he then can use to rate the service composition.
     * @param offerUUID offerUUID
     * @param requestUUID requestUUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public buyOffer(offerUUID: string, requestUUID: string, observe?: 'body', reportProgress?: boolean): Observable<SimpleJSONMessage>;
    public buyOffer(offerUUID: string, requestUUID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SimpleJSONMessage>>;
    public buyOffer(offerUUID: string, requestUUID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SimpleJSONMessage>>;
    public buyOffer(offerUUID: string, requestUUID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (offerUUID === null || offerUUID === undefined) {
            throw new Error('Required parameter offerUUID was null or undefined when calling buyOffer.');
        }

        if (requestUUID === null || requestUUID === undefined) {
            throw new Error('Required parameter requestUUID was null or undefined when calling buyOffer.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<SimpleJSONMessage>(`${this.basePath}/requests/${encodeURIComponent(String(requestUUID))}/offers/${encodeURIComponent(String(offerUUID))}/accept`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllItems
     * Gets a list of all bought items of the requester
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllItems(observe?: 'body', reportProgress?: boolean): Observable<Array<ItemAndRequest>>;
    public getAllItems(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ItemAndRequest>>>;
    public getAllItems(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ItemAndRequest>>>;
    public getAllItems(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ItemAndRequest>>(`${this.basePath}/allitems`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllJobStates
     * Gets a list of all jobstates
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllJobStates(observe?: 'body', reportProgress?: boolean): Observable<Array<JobstateAndRequest>>;
    public getAllJobStates(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<JobstateAndRequest>>>;
    public getAllJobStates(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<JobstateAndRequest>>>;
    public getAllJobStates(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<JobstateAndRequest>>(`${this.basePath}/allJobstates`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllOffers
     * Gets a list of all pending offers of the requester
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllOffers(observe?: 'body', reportProgress?: boolean): Observable<Array<OfferAndRequest>>;
    public getAllOffers(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<OfferAndRequest>>>;
    public getAllOffers(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<OfferAndRequest>>>;
    public getAllOffers(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<OfferAndRequest>>(`${this.basePath}/alloffers`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getExtractedInformation
     * Gets all the extracted information from the requester.
     * @param requestUUID requestUUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getExtractedInformation(requestUUID: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getExtractedInformation(requestUUID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getExtractedInformation(requestUUID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getExtractedInformation(requestUUID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (requestUUID === null || requestUUID === undefined) {
            throw new Error('Required parameter requestUUID was null or undefined when calling getExtractedInformation.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/requests/${encodeURIComponent(String(requestUUID))}/extracted_information`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getItemForRequest
     * Gets the specific item for a request
     * @param requestUUID requestUUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getItemForRequest(requestUUID: string, observe?: 'body', reportProgress?: boolean): Observable<ItemAndRequest>;
    public getItemForRequest(requestUUID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ItemAndRequest>>;
    public getItemForRequest(requestUUID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ItemAndRequest>>;
    public getItemForRequest(requestUUID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (requestUUID === null || requestUUID === undefined) {
            throw new Error('Required parameter requestUUID was null or undefined when calling getItemForRequest.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ItemAndRequest>(`${this.basePath}/requests/${encodeURIComponent(String(requestUUID))}/item`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getJobStateForOTFProvider
     * Gets the job-state for the given OTF-Provider (i.e. how much the otf-provider has processed).
     * @param requestUUID requestUUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getJobStateForOTFProvider(requestUUID: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getJobStateForOTFProvider(requestUUID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getJobStateForOTFProvider(requestUUID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getJobStateForOTFProvider(requestUUID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (requestUUID === null || requestUUID === undefined) {
            throw new Error('Required parameter requestUUID was null or undefined when calling getJobStateForOTFProvider.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/requests/${encodeURIComponent(String(requestUUID))}/jobstate`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getMonitorSourcesForRequest
     * Gets the market monitor sources for a request
     * @param requestUUID requestUUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMonitorSourcesForRequest(requestUUID: string, observe?: 'body', reportProgress?: boolean): Observable<ConfigurationMarketMonitorSources>;
    public getMonitorSourcesForRequest(requestUUID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConfigurationMarketMonitorSources>>;
    public getMonitorSourcesForRequest(requestUUID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConfigurationMarketMonitorSources>>;
    public getMonitorSourcesForRequest(requestUUID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (requestUUID === null || requestUUID === undefined) {
            throw new Error('Required parameter requestUUID was null or undefined when calling getMonitorSourcesForRequest.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ConfigurationMarketMonitorSources>(`${this.basePath}/requests/${encodeURIComponent(String(requestUUID))}/monitor_sources`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getOfferByCompositionID
     * Gets the offers from the OTF-Provider.
     * @param requestUUID requestUUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOfferByCompositionID(requestUUID: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Offer>>;
    public getOfferByCompositionID(requestUUID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Offer>>>;
    public getOfferByCompositionID(requestUUID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Offer>>>;
    public getOfferByCompositionID(requestUUID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (requestUUID === null || requestUUID === undefined) {
            throw new Error('Required parameter requestUUID was null or undefined when calling getOfferByCompositionID.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Offer>>(`${this.basePath}/requests/${encodeURIComponent(String(requestUUID))}/offers`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getSpecificOffer
     * Gets the specific offer
     * @param offerUUID offerUUID
     * @param requestUUID requestUUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSpecificOffer(offerUUID: string, requestUUID: string, observe?: 'body', reportProgress?: boolean): Observable<Offer>;
    public getSpecificOffer(offerUUID: string, requestUUID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Offer>>;
    public getSpecificOffer(offerUUID: string, requestUUID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Offer>>;
    public getSpecificOffer(offerUUID: string, requestUUID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (offerUUID === null || offerUUID === undefined) {
            throw new Error('Required parameter offerUUID was null or undefined when calling getSpecificOffer.');
        }

        if (requestUUID === null || requestUUID === undefined) {
            throw new Error('Required parameter requestUUID was null or undefined when calling getSpecificOffer.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Offer>(`${this.basePath}/requests/${encodeURIComponent(String(requestUUID))}/offers/${encodeURIComponent(String(offerUUID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * initialInterview
     * Provides the initial text containing the domain.
     * @param requestUUID requestUUID
     * @param body body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public initialInterview(requestUUID: string, body?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<OTFProviderConfidence>>;
    public initialInterview(requestUUID: string, body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<OTFProviderConfidence>>>;
    public initialInterview(requestUUID: string, body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<OTFProviderConfidence>>>;
    public initialInterview(requestUUID: string, body?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (requestUUID === null || requestUUID === undefined) {
            throw new Error('Required parameter requestUUID was null or undefined when calling initialInterview.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<OTFProviderConfidence>>(`${this.basePath}/requests/${encodeURIComponent(String(requestUUID))}/initial_interview`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * initializeServiceRequest
     * Initializes a new service requests with the given name.
     * @param body body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public initializeServiceRequest(body: string, observe?: 'body', reportProgress?: boolean): Observable<SimpleJSONUuid>;
    public initializeServiceRequest(body: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SimpleJSONUuid>>;
    public initializeServiceRequest(body: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SimpleJSONUuid>>;
    public initializeServiceRequest(body: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling initializeServiceRequest.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/plain'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SimpleJSONUuid>(`${this.basePath}/requests/initialize`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * putRating
     * 
     * @param body body
     * @param requestUUID requestUUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putRating(body: ServiceReputation, requestUUID: string, observe?: 'body', reportProgress?: boolean): Observable<SimpleJSONMessage>;
    public putRating(body: ServiceReputation, requestUUID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SimpleJSONMessage>>;
    public putRating(body: ServiceReputation, requestUUID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SimpleJSONMessage>>;
    public putRating(body: ServiceReputation, requestUUID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling putRating.');
        }

        if (requestUUID === null || requestUUID === undefined) {
            throw new Error('Required parameter requestUUID was null or undefined when calling putRating.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<SimpleJSONMessage>(`${this.basePath}/requests/${encodeURIComponent(String(requestUUID))}/rate`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
